ruby -e "puts (1..100).to_a.shuffle.join(' ')"
./bin/push_swap $(ruby -e "puts (-10000...10000).to_a.shuffle.join(' ')" | xargs | tr ' ' '\n' | head -n 500 | tr '\n' ' ') | wc -l
Average sort
(Missing implementation of ss rr and rrr)

\/

if (a <= avg)
{
	if (a > last)
		rra
	if (a > a->n)
		sa
	pb
}
else if (a->n <= avg)
	sa
else if (a->last <= avg)
	rra
else
	ra

then

loop <->
if (b < b->last || b < avg)
	rb
eif (b < b->n)
	sb
else
	break ;
loop <->

/\

2nd part
A has 2 elems --

loop <-> while (half isnt sorted)

if (b > a)
	pb
	sb
	pa
if (b->last > b)
	rrb
	pa
if (b < bvg)
	rb
if (b < b->n)
	sb
if (b < a)
	pa

loop <-> Repeat 1st part but reversed on b while b && a isnt sorted

calc average of nth, all bigger go a, less go rb, then again on a, all smaller go ra



---------------


while a < avg
 pb rb
	-> recalc avg
while
	blast > avg	
 		rrb
 --- (b)
	is less then avg go rb;
	eif
	bn is bigger swapb
 --- (a)
	eif a < b
		ra
	else
		pa
12